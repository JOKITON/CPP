class Form {
private:
    const std::string _name;
    bool _signed;
    const int _gradeSign;
    const int _gradeExec

    void GradeTooLowException( int errorGrade );
    void GradeTooHighException( int errorGrade );

public:
    Form(void);
    ~Form(void);

    Form(const Form& p);
    Form( const std::string name, bool signed, const int gradeSign, const int gradeExec);
    Form& operator=(const Form& p);

    const std::string& getName(void) const;
    bool getStatus(void) const;
    const int getGradeSign(void) const;
    const int getGradeExec(void) const;
};

Form::Form(void) : _name("default"), _signed(false), _gradeSign(25), _gradeExec(10) {
    std::cout << "[Form] Default 'constructor' has been called." << std::endl;
}

Form::~Form(void) {
    std::cout << "[Form] Default 'destructor' has been called." << std::endl;
}

Form::Form(const Form& p) {
    std::cout << "[Form] Copy constructor from '" << p.getName() << "' has been called." << std::endl;
    // No need to assign to constant members
    this->_signed = p.getStatus();
}

Form::Form( const std::string name, bool signed, const int gradeSign, const int gradeExec) : _name(name), _signed(signed), _gradeSign(gradeSign), _gradeExec(gradeExec) {
    std::cout << "[Form] Constructor with { " << _name << ", " << _signed << ", " << _gradeSign << ", " << _gradeExex << " } has been called." << std::endl;

    int temp1 = _gradeSign;
    int temp2 = _gradeExec;

    temp1 = (temp1 < 1) ? 0 : temp1;
    temp1 = (temp1 > 150) ? 151 : _gradeSign;

    temp2 = (temp2 < 1) ? 0 : temp2;
    temp2 = (temp2 > 150) ? 151 : _gradeExec;

    switch (temp1) {
        case 0:
            throw 0;
        case 151:
            throw 151;
    }
    catch (int tempGradeSign) {
        switch (tempGradeSign) {
            case 0:
                GradeTooHighException(_gradeSign);
            case 151:
                GradeTooLowException(_gradeSign);
        }
    }

    switch (temp2) {
        case 0:
            throw 0;
        case 151:
            throw 151;
    }
    catch (int tempGradeSign) {
        switch (tempGradeSign) {
            case 0:
                GradeTooHighException(_gradeExec);
            case 151:
                GradeTooLowException(_gradeExec);
        }
    }
}

Form& Form::operator=(const Form& p) {
    std::cout << "[Form] Assignment Operator called from '" << p.getName() << "' to '" << this->_name << "' has been called." << std::endl;
    if (this != &p) {
        // No need to assign to constant members
        this->_signed = p.getStatus();
    }
    return (*this);
}

const std::string& Form::getName( void ) const {
    return this->_name;
}

bool Form::getStatus( void ) const {
    return this->_signed;
}

const int Form::getGradeSign( void ) const {
    return this->_gradeSign;
}

const int Form::getGradeExec( void ) const {
    return this->_gradeExec;
}

void Form::GradeTooHighException( int errorGrade ) {
    std::cout << "[Form] error: the given grade {" << error grade << "} was too high for '" << this->_name << "'!" << std::endl; 
}

void Form::GradeTooLowException( int errorGrade ) {
    std::cout << "[Form] error: the given grade {" << error grade << "} was too low for '" << this->_name << "'!" << std::endl; 
}