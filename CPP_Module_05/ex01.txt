class Form {
private:
    const std::string _name;
    bool _signed;
    const int _gradeSign;
    const int _gradeExec;

public:
    Form(void);
    ~Form(void);
    Form(const Form& p);
    Form& operator=(const Form& p);

    const std::string& getName(void) const;
    bool getStatus(void) const;
    const int getGradeSign(void) const;
    const int getGradeExec(void) const;
};

Form::Form(void) : _name("default"), _signed(false), _gradeSign(25), _gradeExec(10) {
    std::cout << "[Form] Default 'constructor' has been called." << std::endl;
}

Form::~Form(void) {
    std::cout << "[Form] Default 'destructor' has been called." << std::endl;
}

Form::Form(const Form& p) {
    std::cout << "[Form] Copy constructor from '" << p.getName() << "' has been called." << std::endl;
    // No need to assign to constant members
    this->_signed = p.getStatus();
}

Form& Form::operator=(const Form& p) {
    std::cout << "[Form] Assignment Operator called from '" << p.getName() << "' to '" << this->_name << "' has been called." << std::endl;
    if (this != &p) {
        // No need to assign to constant members
        this->_signed = p.getStatus();
    }
    return (*this);
}

const std::string& Form::getName(void) const {
    return this->_name;
}

bool Form::getStatus(void) const {
    return this->_signed;
}

const int Form::getGradeSign(void) const {
    return this->_gradeSign;
}

const int Form::getGradeExec(void) const {
    return this->_gradeExec;
}